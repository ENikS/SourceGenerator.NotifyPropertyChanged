using System.IO;
using System.Linq;
using System.Text;

namespace SourceGenerator.NotifyPropertyChanged
{
    public static class Emitter
    {
        #region Fields

        private static readonly string _event;
        private static readonly string _property;
        private static readonly string _preamble;

        #endregion


        #region Constructors

        static Emitter()
        {
            var assembly = typeof(PropertyGenerator).Assembly;

            // Load preamble template
            using (Stream stream = assembly.GetManifestResourceStream(assembly.GetManifestResourceNames()
                                                                              .First(n => n.EndsWith("Preamble.txt"))))
            using (StreamReader reader = new(stream))
            {
                _preamble = reader.ReadToEnd();
            }


            // Load event template
            using (Stream stream = assembly.GetManifestResourceStream(assembly.GetManifestResourceNames()
                                                                              .First(n => n.EndsWith("Event.txt"))))
            using (StreamReader reader = new(stream))
            {
                _event = reader.ReadToEnd();
            }


            // Load property template
            using (Stream stream = assembly.GetManifestResourceStream(assembly.GetManifestResourceNames()
                                                                              .First(n => n.EndsWith("Property.txt"))))
            using (StreamReader reader = new(stream))
            {
                _property = reader.ReadToEnd();
            }
        }

        #endregion


        #region Code Generation

        /// <summary>
        /// Emit code for type declaration
        /// </summary>
        /// <param name="symbol">Declaration symbol</param>
        /// <returns>A <see cref="StringBuilder"/> containing generated code</returns>
        public static string? Emit(this PartialDeclarationInfo declaration)
        {
            if (declaration.HasEvent && 0 == declaration.Count) return null;

            // Add 'Autogenerated' banner                                             //------------------------------------------------------------------------------ 
            var sb = new StringBuilder(_preamble);                                    // <auto-generated> ...
                                                                                      // 
            sb.Append($"namespace {declaration.Namespace}\n{{\n");                    // namespace 'type_namespace'
                                                                                      // {
            sb.Append($"\t{declaration.Modifiers} class {declaration.Name}\n\t{{\n"); //    [public] partial class 'type_name'
                                                                                      //    {
            // Add generated properties                                               //    
            foreach (GeneratedPropertyInfo info in declaration)                       //        // List of generated properties
            {                                                                         //
                sb.AppendFormat(_property, info.Type,                                 //        bla bla Property 
                                           info.Name,                                 //        {
                                           info.Field);                               //            get {...} set {...}  
            }                                                                         //        }
                                                                                      //        
            // Add event if required                                                  //        
            if (!declaration.HasEvent) sb.Append(_event);                             //        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
                                                                                      //        
            // Class and Namespace closing brackets                                   //    }
            sb.AppendLine($"\t}}\n}}");                                               // }

            return sb.ToString();
        }                        

        #endregion
    }
}
